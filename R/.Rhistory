dim(coef(model))
length(coef(model))
abline(beta0, beta1, lty = 2, col = "blue")
res = model$residuals
res
residuals(model)
res = residuals(model)
est.values = fitted(model)
par(mfrow = c(2, 2))
hist(res, prob = TRUE)
plot(res, pch = 19, cex = 0.5, ylab = "Residuals")
plot(res, pch = 19, cex = 0.05, ylab = "Residuals")
model = lm(medv ~ lstat, data = Boston)
summary(model)
est.values = fitted(model)
plot(Boston$lstat, Boston$medv, pch = 19, cex = 0.5, xlab = "% of lower status of the population", ylab = "Median value")
points(Boston$lstat, est.values, pch = "x", col = "green")
abline(coef(model)[1], coef(model)[2], lty = 2, col = "red", lwd = 3)
abline(beta0, beta1, lty = 2, col = "blue") # lty = line type dashed
res = residuals(model)
par(mfrow = c(2, 2))
hist(res, prob = TRUE)
plot(res, pch = 19, cex = 0.05, ylab = "Residuals")
model = lm(medv ~ lstat, data = Boston)
summary(model)
est.values = fitted(model)
plot(Boston$lstat, Boston$medv, pch = 19, cex = 0.5, xlab = "% of lower status of the population", ylab = "Median value")
points(Boston$lstat, est.values, pch = "x", col = "green")
abline(coef(model)[1], coef(model)[2], lty = 2, col = "red", lwd = 3)
abline(beta0, beta1, lty = 2, col = "blue") # lty = line type dashed
res = residuals(model)
par(mfrow = c(2, 2))
hist(res, prob = TRUE)
plot(res, pch = 19, cex = 0.1, ylab = "Residuals")
model = lm(medv ~ lstat, data = Boston)
summary(model)
est.values = fitted(model)
plot(Boston$lstat, Boston$medv, pch = 19, cex = 0.5, xlab = "% of lower status of the population", ylab = "Median value")
points(Boston$lstat, est.values, pch = "x", col = "green")
abline(coef(model)[1], coef(model)[2], lty = 2, col = "red", lwd = 3)
abline(beta0, beta1, lty = 2, col = "blue") # lty = line type dashed
res = residuals(model)
par(mfrow = c(2, 2))
hist(res, prob = TRUE)
plot(res, pch = 19, cex = 0.5, ylab = "Residuals")
abline(h=0, lty = 2)
plot(est.values, res, pch = 19, cex = 0.5, xlab = "Estimated values", ylab = "Residuals")
abline(h = 0, lty = 2)
plot(Boston$lstat, res, ylab = "Residuals", xlab = "% of lower status of the population", pch = 19, cex = 0.5)
abline(h=0, lty = 2)
par(mfrow = c(2, 2))
plot(model)
vcov(model)
se = sqrt(diag(vcov(model)))
se
sqrt(0.316)
?qt
c(beta1 - qt(0.975, df = n - 2) * se[2], beta1 + qt(0.975, df = n - 2) * se[2])
n
confint(model)
# if n > 30
c(beta1 - qnorm(0.975, df = n - 2) * se[2], beta1 + qnorm(0.975, df = n - 2) * se[2])
# if n > 30
c(beta1 - qnorm(0.975) * se[2], beta1 + qnorm(0.975) * se[2])
# Hypothesis H0 = beta1 = -1 with significance level 0.05
statistic.t = (beta1 - (-1)) / se[2]
statistic.t
qt(0.025, df = n - 2)
?qt
# p-value of the test
2 * min(pt(statistic.t, n-2), 1 - pt(statistic.t, n-2))
?pt
pt(statistic.t, n-2)
pt(statistic.t, n-2) * 2
1 - pt(statistic.t, n-2)
(1 - pt(statistic.t, n-2) )*2
predict(model, newdata = data.frame(list(lstat = c(5, 10, 25))))
predict(model, newdata = data.frame(list(lstat = c(5, 10, 25))), interval = "prediction")
plot(Boston$crim, Boston$medv, ylab = "Median value", xlab = "Crime", pch = 19, cex = 0.5)
model.mv = lm(medv ~ lstat + crim, data = Boston)
summary(model.mv)
model2 = lm(mdev ~ poly(lstat, 2, raw = TRUE), data = Boston)
model2 = lm(medv ~ poly(lstat, 2, raw = TRUE), data = Boston)
summary(model2)
?qf
rss0 = sum(model$residuals^2)
rss0
(6.216^2)*504
sum((model$fitted.values - medv)^2)
n
rss = (5.524^2) * (n - 2 - 1)
rss
f = (rss0 - rss) / rss * (503)
f
qf(0.95, 1, 503)
qf(0.95, 1, n - 3)
?qf
1 - pf(f, 1, 503)
anova(model, model2)
1 - qt(0.025, df=n-2)
plot(model2)
par(mfrow = c(2, 2))
plot(model2)
library(MASS)
data(Boston)
Boston[1, ]
attach(Boston)
m2 = lm(medv ~ lstat + I(lstat^2), data = Boston)
summary(m2)
m3 = lm(medv ~ poly(lstat, 3), data = Boston)
summary(m3)
anova(m2, m3)
logLik(m3)
logLik(m2)
logLik(m3)
m2.glm = glm(medv ~ poly(lstat, 2), data = Boston)
m3.glm = glm(medv ~ poly(lstat, 3), data = Boston)
m2.glm$aic - m3.glm$aic
library(boot)
set.seed(123)
cv.err.m2 = cv.glm(Boston, m2.glm, K = 10)
names(cv.err.m2)
cv.err.m2$delta
cv.err.m3 = cv.glm(Boston, m3.glm, K = 10)
cv.err.m3$delta
cv.glm(Boston, m2.glm)$delta
cv.glm(Boston, m3.glm)$delta
adj.r2 = rep(0, 6)
aic = rep(0, 6)
for(i in 1:6) {
m = lm(medv ~ poly(lstat, i), data = Boston)
adj.r2[i] = summary(m)$adj.r.squared
aic[i] = 2 * (i+2) - 2 * logLik(m)
}
adj.r2
aic
m5.glm = glm(medv ~ poly(lstat, 5), data = Boston)
m6.glm = glm(medv ~ poly(lstat, 6), data = Boston)
set.seed(123)
cv.err.m5 = cv.glm(Boston, m5.glm, K = 10)$delta
cv.err.m5
cv.err.m6 = cv.glm(Boston, m6.glm, K = 10)$delta
cv.err.m6$delta
cv.err.m6 = cv.glm(Boston, m6.glm, K = 10)$delta
cv.err.m6
library(MASS)
data(Boston)
Boston[1, ]
attach(Boston)
m2 = lm(medv ~ lstat + I(lstat^2), data = Boston)
summary(m2)
m3 = lm(medv ~ poly(lstat, 3), data = Boston)
summary(m3)
anova(m2, m3)
logLik(m2)
logLik(m3)
m2.glm = glm(medv ~ poly(lstat, 2), data = Boston)
m3.glm = glm(medv ~ poly(lstat, 3), data = Boston)
m2.glm$aic - m3.glm$aic
library(boot)
set.seed(123)
cv.err.m2 = cv.glm(Boston, m2.glm, K = 10)
names(cv.err.m2)
cv.err.m2$delta
cv.err.m3 = cv.glm(Boston, m3.glm, K = 10)
cv.err.m3$delta
cv.glm(Boston, m2.glm)$delta
cv.glm(Boston, m3.glm)$delta
adj.r2 = rep(0, 6)
aic = rep(0, 6)
for(i in 1:6) {
m = lm(medv ~ poly(lstat, i), data = Boston)
adj.r2[i] = summary(m)$adj.r.squared
aic[i] = 2 * (i+2) - 2 * logLik(m)
}
adj.r2
aic
m5.glm = glm(medv ~ poly(lstat, 5), data = Boston)
m6.glm = glm(medv ~ poly(lstat, 6), data = Boston)
set.seed(123)
cv.err.m5 = cv.glm(Boston, m5.glm, K = 10)$delta
cv.err.m5
cv.err.m6 = cv.glm(Boston, m6.glm, K = 10)$delta
cv.err.m6
library(ISLR)
data(Hitters)
dim(Hitters)
sum(is.na(Hitters))
hitters = na.omit(Hitters)
sum(is.na(hitters))
par(mfrow=c(1, 2))
boxplot(hitters$Salary)
boxplot(log(hitters$Salary))
hitters$Salary = log(hitters$Salary)
library(leaps)
m.forward = regsubsets(Salary ~ ., data = hitters, nvmax = 19, method = "forward")
summary(m.forward)
names(summary(m.forward))
which.min(summary(m.forward)$rss)
coef(m.forward, 19)
which.min(summary(m.forward)$bic) # 19
coef(m.forward, 4)
vcov(m.forward, 4)
vcov(m.forward, 4)
sqrt(diag(vcov(m.forward, 4)))
plot(m.forward)
plot(m.forward)
plot(m.forward, scale = "adjr2")
par(mfrow = c(2, 2))
plot(summary(m.forward)$rsq)
plot(summary(m.forward)$rsq, type = "l")
plot(summary(m.forward)$rsq, type = "l")
plot(summary(m.forward)$rsq, type = "l")
par(mfrow = c(2, 2))
plot(summary(m.forward)$rsq, type = "l")
max.rqs = which.max(summary(m.forward)$rsq)
max.rsq = which.max(summary(m.forward)$rsq)
points(max.rsq, summary(m.forward)$rsq[max.rsq], col = 2, pch = 16)
plot(summary(m.forward)$rss, type = "l")
min.rss = which.min(summary(m.forward)$rss)
points(min.rss, summary(m.forward)$rss[min.rss], col = 2, pch = 16)
plot(summary(m.forward)$adjr2, type = "l")
max.adjr2 = which.max(summary(m.forward)$adjr2)
points(max.adjr2, summary(m.forward)$adjr2[max.adjr2], col = 2, pch = 16)
max.adjr2
plot(summary(m.forward)$bic, type = "l")
min.bic = which.min(summary(m.forward)$bic)
points(min.bic, summary(m.forward)$bic[min.bic], col = 2, pch = 16)
min.bic
coef(m.forward, 4)
attach(Hitters)
attach(hitters)
model.bic = lm(Salary ~ hitters$Hits + hitters$Years + hitters$CRuns + hitters$PutOuts, data = hitters)
summary(model.bic)
par(mfrow=c(2,2))
plot(model.bic, pch=16, cex=0.7)
m.backward <- regsubsets(Salary ~ ., data=hitters, nvmax=19, method='backward')
plot(m.backward)
plot(m.backward)
plot(m.backward)
# Mixed selection
m.seqrep <- regsubsets(Salary ~ ., data=hitters, nvmax=19, method='seqrep')
plot(m.seqrep)
# Mixed selection
m.seqrep <- regsubsets(Salary ~ ., data=hitters, nvmax=19, method='seqrep')
plot(m.seqrep)
setwd("~/Desktop/Repo/lab/R")
library(ISLR)
dim(College)
par(mfrow = c(1, 2))
dim(College)
attach(College)
hist(Apps, prob = TRUE, main = "Original scale")
hist(Apps, main = "Original scale")
par(mfrow = c(1, 2))
hist(Apps, main = "Original scale")
View(College)
hist(log(Apps), main = "Log transformation")
college = College[, c("Apps", "Private", "PhD", "S.F.Ratio", "Accept")]
?College
summary(college)
rm(list = ls())
library(ISLR)
dim(College)
par(mfrow = c(1, 2))
hist(Apps, main = "Original scale")
hist(log(Apps), main = "Log transformation")
college = College[, c("Apps", "Private", "PhD", "S.F.Ratio", "Accept")]
summary(college)
attach(college)
boxplot(Apps ~ Private)
boxplot(Apps ~ Private)
boxplot(college$Apps ~ college$Private)
rm(list = ls())
library(ISLR)
dim(College)
par(mfrow = c(1, 2))
hist(Apps, main = "Original scale")
hist(log(Apps), main = "Log transformation")
College$Apps = log(College$Apps)
college = College[, c("Apps", "Private", "PhD", "S.F.Ratio", "Accept")]
summary(college)
attach(college)
boxplot(Apps ~ Private)
boxplot(Apps ~ Private)
pairs(college[, -2], pch = ".")
pairs(college, pch = ".")
pairs(college, col = Private, pch = ".")
pairs(college[, -2], col = Private, pch = ".")
pairs(college[, -2], pch = ".")
m = lm(Apps ~ Private + PDF + S.F.Ratio + poly(Accept, 2), data = college)
summary(lm)
m = lm(Apps ~ Private + PhD + S.F.Ratio + poly(Accept, 2), data = college)
summary(lm)
m = lm(Apps ~ Private + PhD + S.F.Ratio + poly(Accept, 2), data = college)
summary(m)
?PhD
?College
phd.ns2 = lm(Apps ~ ns(PhD, 2), data = college)
library(splines)
phd.ns2 = lm(Apps ~ ns(PhD, 2), data = college)
phd.ns3 = lm(Apps ~ ns(PhD, 3), data = college)
phd.ns4 = lm(Apps ~ ns(PhD, 4), data = college)
?ns
extractAIC(phd.ns2)
extractAIC(phd.ns3)
extractAIC(phd.ns4)
plot(college$PhD, college$Apps, xlab = "PhD", ylab = "Log(Apps)", pch = ".")
new.PhD = seq(min(college$PhD), max(college$PhD), length.out = 100)
lines(new.PhD, predict(phd.ns2, newdata = data.frame(PhD = new.PhD)), col = "red", lty = 2, lwd = 2)
lines(new.PhD, predict(phd.ns3, newdata = data.frame(PhD = new.PhD)), col = "red", lty = 2, lwd = 2)
plot(college$PhD, college$Apps, xlab = "PhD", ylab = "Log(Apps)", pch = ".")
new.PhD = seq(min(college$PhD), max(college$PhD), length.out = 100)
lines(new.PhD, predict(phd.ns2, newdata = data.frame(PhD = new.PhD)), col = "red", lty = 2, lwd = 2)
lines(new.PhD, predict(phd.ns3, newdata = data.frame(PhD = new.PhD)), col = "green", lty = 2, lwd = 2)
lines(new.PhD, predict(phd.ns4, newdata = data.frame(PhD = new.PhD)), col = "blue", lty = 2, lwd = 2)
legend("topleft", legend = c("ns2", "ns3", "ns4"), col = c("red", "green", "blue"), lty = c(2, 2, 2), bty = "n")
sf.ns2 = lm(Apps ~ ns(S.F.Ratio, 2), data = college)
phd.ns3 = lm(Apps ~ ns(S.F.Ratio, 3), data = college)
phd.ns4 = lm(Apps ~ ns(S.F.Ratio, 4), data = college)
extractAIC(sf.ns2)
extractAIC(sf.ns3)
extractAIC(sf.ns4)
new.sfratio = seq(min(college$S.F.Ratio), max(college$S.F.Ratio), length.out = 100)
plot(college$S.F.Ratio, college$Apps, xlab = "S.F.Ratio", ylab = "Log(Apps)", pch = ".")
new.sfratio = seq(min(college$S.F.Ratio), max(college$S.F.Ratio), length.out = 100)
lines(new.sfratio, predict(phd.ns2, newdata = data.frame(S.F.Ratio = new.sfratio)), col = "red", lty = 2, lwd = 2)
sf.ns2 = lm(Apps ~ ns(S.F.Ratio, 2), data = college)
sf.ns3 = lm(Apps ~ ns(S.F.Ratio, 3), data = college)
sf.ns4 = lm(Apps ~ ns(S.F.Ratio, 4), data = college)
extractAIC(sf.ns2)
extractAIC(sf.ns3)
extractAIC(sf.ns4)
phd.ns2 = lm(Apps ~ ns(PhD, 2), data = college)
phd.ns3 = lm(Apps ~ ns(PhD, 3), data = college)
phd.ns4 = lm(Apps ~ ns(PhD, 4), data = college)
extractAIC(phd.ns2)
extractAIC(phd.ns3)
extractAIC(phd.ns4)
plot(college$PhD, college$Apps, xlab = "PhD", ylab = "Log(Apps)", pch = ".")
new.PhD = seq(min(college$PhD), max(college$PhD), length.out = 100)
lines(new.PhD, predict(phd.ns2, newdata = data.frame(PhD = new.PhD)), col = "red", lty = 2, lwd = 2)
lines(new.PhD, predict(phd.ns3, newdata = data.frame(PhD = new.PhD)), col = "green", lty = 2, lwd = 2)
lines(new.PhD, predict(phd.ns4, newdata = data.frame(PhD = new.PhD)), col = "blue", lty = 2, lwd = 2)
legend("topleft", legend = c("ns2", "ns3", "ns4"), col = c("red", "green", "blue"), lty = c(2, 2, 2), bty = "n")
sf.ns2 = lm(Apps ~ ns(S.F.Ratio, 2), data = college)
sf.ns3 = lm(Apps ~ ns(S.F.Ratio, 3), data = college)
sf.ns4 = lm(Apps ~ ns(S.F.Ratio, 4), data = college)
extractAIC(sf.ns2)
extractAIC(sf.ns3)
extractAIC(sf.ns4)
plot(college$S.F.Ratio, college$Apps, xlab = "S.F.Ratio", ylab = "Log(Apps)", pch = ".")
new.sfratio = seq(min(college$S.F.Ratio), max(college$S.F.Ratio), length.out = 100)
lines(new.sfratio, predict(sf.ns2, newdata = data.frame(S.F.Ratio = new.sfratio)), col = "red", lty = 2, lwd = 2)
lines(new.sfratio, predict(sf.ns3, newdata = data.frame(S.F.Ratio = new.sfratio)), col = "green", lty = 2, lwd = 2)
lines(new.sfratio, predict(sf.ns4, newdata = data.frame(S.F.Ratio = new.sfratio)), col = "blue", lty = 2, lwd = 2)
legend("topleft", legend = c("ns2", "ns3", "ns4"), col = c("red", "green", "blue"), lty = c(2, 2, 2), bty = "n")
m.ns = lm(Apps ~ Private + ns(PhD, 3) + ns(S.F.Ratio) + poly(Accept, 2), data = college)
summary(m.ns)
m.ns = lm(Apps ~ Private + ns(PhD, 2) + ns(S.F.Ratio) + poly(Accept, 2), data = college)
summary(m.ns)
m.ns = lm(Apps ~ Private + ns(PhD, 3) + ns(S.F.Ratio) + poly(Accept, 2), data = college)
summary(m.ns)
m.ns = lm(Apps ~ Private + ns(PhD, 3) + ns(S.F.Ratio, 3) + poly(Accept, 2), data = college)
summary(m.ns)
m.ns2 = lm(Apps ~ ns(PhD, 3) + ns(S.F.Ratio, 3) + poly(Accept, 2), data = college)
summary(m.n2)
summary(m.ns2)
anova(m.ns, m.sn2)
anova(m.ns, m.ns2)
m.ns = lm(Apps ~ Private + ns(PhD, 3) + ns(S.F.Ratio, 3) + poly(Accept, 2), data = college)
summary(m.ns)
m.ns2 = lm(Apps ~ ns(PhD, 3) + ns(S.F.Ratio, 3) + poly(Accept, 2), data = college)
summary(m.ns2)
anova(m.ns2, m.ns)
m.ns = lm(Apps ~ Private + ns(PhD, 3) + ns(S.F.Ratio, 3) + poly(Accept, 2), data = college)
summary(m.ns)
m.ns2 = lm(Apps ~ ns(PhD, 3) + ns(S.F.Ratio, 3) + poly(Accept, 2), data = college)
summary(m.ns2)
anova(m.ns2, m.ns)
m.ns = lm(Apps ~ Private + ns(PhD, 3) + ns(S.F.Ratio, 3) + poly(Accept, 2), data = college)
summary(m.ns)
m.ns2 = lm(Apps ~ ns(PhD, 3) + ns(S.F.Ratio, 3) + poly(Accept, 2), data = college)
summary(m.ns2)
anova(m.ns2, m.ns)
m.ns3 = lm(Apps ~ ns(PhD, 3) + ns(S.F.Ratio, 2) + poly(Accept, 2), data = college)
summary(m.n3, m.ns2)
anova(m.n3, m.ns2)
anova(m.ns3, m.ns2)
anova(m.ns, m.ns2)
anova(m.ns2, m.ns3)
anova(m.ns3, m.ns2)
anova(m.ns2, m.ns3)
par(mfrow=c(2, 2))
plot(m.ns2)
accept.ns3 = lm(Apps ~ ns(Accept, 3), data = college)
accept.ns4 = lm(Apps ~ ns(Accept, 4), data = college)
accept.ns5 = lm(Apps ~ ns(Accept, 5), data = college)
extractAIC(accept.ns3)
extractAIC(accept.ns4)
extractAIC(accept.ns5)
m.ns4 = lm(Apps ~ ns(PhD, 3) + ns(S.F.Ratio, 2) + ns(Accept, 5), data = college)
summary(m.ns4)
anova(m.ns2, m.ns4)
anova(m.ns2, m.ns3)
par(mfrow = c(2, 2))
plot(m.ns4)
plot(college$Apps, predict(m.ns4))
plot(college$Apps, predict(m.ns4))
abline(0, 1, col = "red", lwd = 2)
mean((college$Apps - predict(m.ns4))^2)
phd.cv = smooth.spline(x = college$PhD, y = college$Apps, cv = TRUE)
phd.cv
phd.fit = smooth.spline(x = college$PhD, y = college$Apps, df = phd.cv$df)
set.seed(111)
sf.cv = smooth.spline(x = college$S.F.Ratio, y = college$Apps, cv = TRUE)
sf.cv
sf.fit = smooth.spline(x = college$S.F.Ratio, y = college$Apps, df = sf.cv$df)
library(gam)
phd.cv$df
sf.cv$df
m.gam = gam(Apps ~ Private + s(PhD, 5) + s(S.F.Ratio, 6) + poly(Accept, 2), data = college)
summary(m.gam)
extractAIC(accept.ns3)
extractAIC(accept.ns4)
extractAIC(accept.ns5)
accept.cv = smooth.spline(x = college$Accept, y = college$Apps, cv = TRUE)
accept.fit = smooth.spline(x = college$Accept, y = college$Apps, df = accept.cv$df)
accept.fit
m.gam2 = gam(Apps ~ Private + s(PhD, 5) + s(S.F.Ratio, 6) + s(Accept, 21), data = college)
summary(m.gam2)
anova(m.gam, m.gam2)
m.gam2 = gam(Apps ~ Private + s(PhD, 5) + s(S.F.Ratio, 5) + s(Accept, 21), data = college)
m.gam2 = gam(Apps ~ Private + s(PhD, 5) + s(S.F.Ratio, 6) + s(Accept, 21), data = college)
summary(m.gam2)
anova(m.gam, m.gam2)
m.gam3 = gam(Apps ~ Private + s(PhD, 5) + s(S.F.Ratio, 5) + s(Accept, 21), data = college)
summary(m.gam3)
par(mfrow = c(1, 4))
plot(m.gam3, se = TRUE)
par(mfrow = c(1, 2))
plot(college$Apps, predict(m.ns4), xlab = "log(Apps", ylab = "Predictions", pch = ".", main = "Natural splines", ylim=c(5, 11))
abline(0, 1, col = "red", lwd = 2)
plot(college$Apps, predict(m.gam3), xlab = "log(Apps", ylab = "Predictions", pch = ".", main = "Smoothing splines", ylim=c(5, 11))
abline(0, 1, col = "red", lwd = 2)
HighApps = College$Apps > 8
table(HighApps)
summary(glm.gam)
glm.gam = gam(HighApps ~ Private + s(PhD, 5) + s(S.F.Ratio, 6) + s(Accept, 21), data = college, family = "binomial")
summary(glm.gam)
glm.gam2 = gam(HighApps ~ Private + s(PhD, 5) + s(S.F.Ratio, 5) + s(Accept, 21), data = college, family = "binomial")
summary(glm.gam2)
glm.gam3 = gam(HighApps ~ Private + s(PhD, 5) + s(S.F.Ratio, 4) + s(Accept, 21), data = college, family = "binomial")
summary(glm.gam3)
anova(glm.gam, glm.gam2)
anova(glm.gam2, glm.gam3)
anova(glm.gam3, glm.gam2)
anova(glm.gam3, glm.gam2)
anova(glm.gam, glm.gam2)
anova(glm.gam3, glm.gam2)
rm(list = ls())
library(pls)
data("gasoline")
names(gasoline)
dim(gasoline$NIR)
y = gasoline$octane
X = gasoline$NIR
set.seed(222)
m.pcr = pcr(y ~ X, ncomp = 20, scale = TRUE, validation = "CV")
summary(m.pcr)
par(mfrow = c(1, 2))
validationplot(m.pcr, val.type = "MSEP", main = "Gasoline")
validationplot(m.pcr, val.type = "R2", main = "Gasoline")
par(mfrow = c(1, 2))
validationplot(m.pcr, val.type = "MSEP", main = "Gasoline", axes = FALSE)
axis(1, at = 1:20)
axis(2)
validationplot(m.pcr, val.type = "R2", main = "Gasoline", axes = FALSE)
axis(1, at = 1:20)
axis(2)
# Select best number of components using one-sigma rule
selectNcomp(m.pcr, method = "onesigma", ncomp = 20)
explvar(m.pcr) # explained variance by each single component
plot(1:20, explvar(m.pcr), ylab = "% of explained variance", xlab = "PCs", type = "l", axes = FALSE)
axis(1, at=1:20)
axis(2)
coefplot(m.pcr, ncomp = 1:5, legendpos = "bottomleft", main = "", xlab = "Variables", ylab = "Regression coefficients")
coefplot(m.pcr, ncomp = 5, main = "", xlab = "Variables", ylab = "Regression coefficients")
scoreplot(m.pcr, comps = 1:5, cex = 0.5, cex.lab = 1.4, cex.axis = 1.4, pch = 19)
plot(m.pcr, xlab = "Observed values", ylab = "Predictions", main = "Model with 5 PCsi")
abline(0, 1)
library(glmnet)
set.seed(222)
m.ridge = glmnet(X, y, alpha = 0, lambda.min = 1e-4)
cv.ridge = cv.glmnet(X, y, alpha = 0, lambda.min = 1e-4)
best.lambda = cv.ridge$lambda.min
min(cv.ridge$cvm)
MSEP(m.pcr, ncomp = 5)
m.lasso = glmnet(X, y, alpha = 1, lambda.min = 1e-4)
set.seed(222)
cv.lasso = cv.glmnet(X, y, alpha = 1, lambda.min = 1e-4)
best.lambda.lasso = cv.lasso$lambda.min
m.lasso.min = glmnet(X, y, alpha = 1, lambda = best.lambda.lasso)
min(cv.lasso$cvm)
par(mfrow = c(1, 2))
plot(m.ridge, xvar = "lambda", main = "Regressione ridge")
abline(v = log(best.lambda), lty = 2)
plot(m.lasso, xvar = "lambda", main = "lasso")
abline(v = log(best.lambda.lasso), lty = 2)
id.zero = which(coef(m.lasso.min) == 0)
length(id.zero)
length(coef(m.lasso.min)) - length(id.zero)
